---
title: "Problematic projections"
author: "Juho Timonen"
format: 
  html:
    self-contained: true
    toc: true
    anchor-sections: true
    code-fold: true
    code-summary: "Show code"
editor: visual
---

## Setup

```{r}
library(rstan)
library(posterior)
library(ggplot2)
library(mgcv)
library(dimreduce)
source("R/rstan.R")
source("R/search.R")
source("R/project.R")
source("R/project_old.R") # for project_sigma()
source("R/simulate.R")
source("R/plotting.R")
source("R/selection.R")
source("R/hs_smooth.R")
source("R/relevances.R")

CHAINS <- 1
ITER <- 600
CN <- list(adapt_delta = 0.9)

# Simulation setup
rho <- 0.7
sigma <- 3
rel_true <- c(1, 1, 0, 0, 1, 0, 0, 0) # true relevances
n <- 600
D <- length(rel_true)
set.seed(7899) # fix random seed
```

## Data simulation

```{r}
# Run sim and create data setup
dat <- simulate(n, rho, rel_true, sigma)
n <- length(dat$y)
splt <- create_split(n, 0.5)
ds <- list(dat = dat, split = splt)
```

## Fitting reference model

```{r}
# Model setup
# Create the Stan model
mod <- rstan::stan_model("stan/model_sample.stan")
ms <- list(
  stan_model = mod,
  B = 24,
  scale_bf = 1.5
)

dat_df <- create_data_frame(ds, test = FALSE)


fmf1 <- fit_full_model(ds, ms,
  chains = CHAINS, iter = ITER, control = CN,
  thin = 10,
  seed = 507949442
)

# Use SPCA reference model
# fmf2 <- fit_full_model(ds, ms,
#  chains = CHAINS, iter = ITER, control = CN,
#  thin = 10, nctot = 5
# )

```

## Ranking the variables

```{r}
# Rank and print the ordering
cv1 <- comp_vars(fmf1$fit, fmf1$J)
path <- sort(cv1, index.return = T, decreasing = T)$ix
print(path)
```

## Visualizing the reference model posterior

```{r}
pa <- plot(fmf1$fit, pars = c("alpha")) + ggtitle("Magnitudes")
pb <- plot(fmf1$fit, pars = c("ell")) + ggtitle("Lengthscales")
ppost <- ggpubr::ggarrange(pa, pb, nrow = 1, ncol = 2)
ppost
```

## Performing the projections

```{r}
# Run selection with projection predictive method
options(pp.threshold = Inf) # no stopping condition
#options(min.sp = 1e-1) # lower bound for smoothing parameter

# Use HS GP basis
options(bs.type = "hs")
sel_pp_hs4 <- selection_pp(fmf1, path)

# Use thin plate spline basis
options(bs.type = "tp")
sel_pp_tp <- selection_pp(fmf1, path)

sels <- list(sel_pp_hs4, sel_pp_tp)
names(sels) <- c("hs4", "tp")
plot_mlpd <- function(sels, test = TRUE) {
  get_mlpd_test <- function(x) {
    x$search$history$mlpd_test
  }
  get_mlpd_train <- function(x) {
    x$search$history$mlpd_train
  }
  if (test) {
    mlpd <- data.frame(sapply(sels, get_mlpd_test))
    ylabb <- "Test MLPD"
  } else {
    mlpd <- data.frame(sapply(sels, get_mlpd_train))
    ylabb <- "Train MLPD"
  }

  mlpd$num_vars <- 0:8
  df <- reshape2::melt(mlpd, id.vars = "num_vars")
  ggplot(df, aes(x = num_vars, y = value, group = variable, color = variable)) +
    geom_line() +
    labs(color = "base") +
    ylab(ylabb) +
    geom_point() +
    theme(legend.position = "top")
}
paths <- sapply(sels, function(x) {
  x$search$path
})
plt1 <- plot_mlpd(sels, FALSE)
plt2 <- plot_mlpd(sels, TRUE)
plt_mlpd <- ggpubr::ggarrange(plt1, plt2)
plt_mlpd
```

## Rerun projection

```{r}
# Run projection again for problematic model
a <- fmf1
subm <- c(1, 5, 2)
options(bs.type = "hs")
p1 <- project_model(subm, a$fit, a$sd)
options(bs.type = "tp")
p2 <- project_model(subm, a$fit, a$sd)
projs <- list(hs = p1, tp = p2)
```

## Visualizations of the problem

Identifying problematic draw/data point

```{r}
x_test <- a$ds$dat$x[a$ds$split$test, ]
x_train <- a$ds$dat$x[a$ds$split$train, ]
train_ranges <- apply(x_train, 2, range)
get_mpt <- function(x) {
  p <- x$pd$mu_proj_test
  lpd <- rowMeans(x$all_lpd_test)
  cbind(x_test, lpd, p)
}
mu_proj_test <- lapply(projs, get_mpt)

# Helper function
to_df <- function(mat) {
  a <- data.frame(mat)
  df <- reshape(a,
    direction = "long", varying = 10:ncol(a),
    sep = ""
  ) # this causes the draw indices to be off by 9
  colnames(df)[9:12] <- c("mlpd", "draw_idx", "mu", "data_idx")
  df
}
df <- lapply(mu_proj_test, to_df)
nrows <- sapply(df, nrow)
df <- rbind(df[[1]], df[[2]])
b1 <- rep(names(nrows)[1], nrows[1])
b2 <- rep(names(nrows)[2], nrows[2])
df$base <- as.factor(c(b1, b2))
rownames(df) <- NULL

# Pick draw with most extreme mu
idx_max <- which(abs(df$mu) == max(abs(df$mu)))
idx_extreme <- df[idx_max, ]$draw_idx
df_extreme <- df[df$draw_idx == idx_extreme, ]
cat("Most problematic draw idx: ", idx_extreme-9, "\n", sep ="")

# Plot to identify problematic draw/data point
plt <- ggplot(df, aes(
  x = draw_idx, y = mu, group = base, color = mlpd,
  pch = base
)) +
  geom_point(alpha = 0.75) + xlab("Draw idx (off by 9)")
plt
```

### Plotting the projected weights

```{r}
get_mt <- function(x) {
  x$metrics$mlpd_test
}
v1 <- sapply(projs, get_mt) # should match earlier values
w <- p1$pd$weights
create_plt_z <- function(w, idx) {
  df_w <- data.frame(w = w[, idx], x = rownames(w))
  term <- sapply(strsplit(df_w$x, "[.]"), function(x) {
    x[1]
  })
  df_w$term <- as.factor(term)
  ggplot(df_w, aes(x = x, y = w, color = term)) +
    geom_point()
}
d_idx <- idx_extreme - 9 # indexing off by 9
ell_all <- extract(fmf1$fit, "ell")$ell
cat("Printing all lengthscale draws\n")
print(round(ell_all,2))

ell_extreme <- extract(fmf1$fit, "ell")$ell[d_idx,]
alpha_extreme <- extract(fmf1$fit, "alpha")$alpha[d_idx,]
cat("Printing the reference model lengthscales in the most extreme draw\n")
print(round(ell_extreme, 2))
cat("Printing the reference model magnitude params in the most extreme draw\n")
print(round(alpha_extreme,2))

plt_z_a <- create_plt_z(w, d_idx) + ggtitle(paste0("Weights, draw_idx = ", d_idx)) +
  theme(legend.position = "top")
plt_z_b <- create_plt_z(w, 1) + ggtitle("Weights, draw_idx = 1") +
  theme(legend.position = "top")
plt_z <- ggpubr::ggarrange(plt_z_a, plt_z_b)
plt_z
```

### mgcv convergence

```{r}
cols <- c("sig2", "gcv.ubre.dev", "deviance", "boundary", "fully.converged", "iter", "score.calls")
info <- projs$hs$pd$mgcv_info[, cols]
info$mlpd <- colMeans(projs$hs$all_lpd_test)
print(info, n=nrow(info))
plot(info$iter, info$mlpd)
plot(info$gcv.ubre.dev, info$mlpd)
```

### estimated smoothing parameters

```{r}
sp <- projs$hs$pd$smoothing_params
print(sp)
plot(info$mlpd, log10(sp$`s(x1)`), xlab="MLPD", ylab="log10(gamma_1)", main="Smoothing param for s(x1)")
```

The smoothing parameter is very small for the bad draw.

### Other plots

```{r}
LL <- a$sd$L # length 8
create_4_plots <- function(df, cc, gg) {
  aes1 <- aes_string(
    x = "data_idx", y = "mu", group = gg, color = cc, pch = gg
  )
  aes2 <- aes_string(
    x = "x1", y = "mu", group = gg, color = cc, pch = gg
  )
  aes3 <- aes_string(
    x = "x2", y = "mu", group = gg, color = cc, pch = gg
  )
  aes4 <- aes_string(
    x = "x5", y = "mu", group = gg, color = cc, pch = gg
  )
  plt_ex <- ggplot(df, aes1) +
    geom_point(alpha = 0.75) +
    xlab("test_point_idx")

  plt_ex_x1 <- ggplot(df, aes2) +
    geom_vline(xintercept = train_ranges[, 1], lty = 3) +
    geom_vline(xintercept = LL[1], lty = 2, col="red") +
    geom_vline(xintercept = - LL[1], lty = 2, col="red") +
    geom_point(alpha = 0.75) +
    theme(legend.position = "top")
  plt_ex_x2 <- ggplot(df, aes3) +
    geom_vline(xintercept = train_ranges[, 2], lty = 3) +
    geom_point(alpha = 0.75) +
    geom_vline(xintercept = LL[2], lty = 2, col="red") +
    geom_vline(xintercept = - LL[2], lty = 2, col="red") +
    theme(legend.position = "top")
  plt_ex_x5 <- ggplot(df, aes4) +
    geom_vline(xintercept = train_ranges[, 3], lty = 3) +
    geom_vline(xintercept = LL[5], lty = 2, col="red") +
    geom_vline(xintercept = - LL[5], lty = 2, col="red") +
    geom_point(alpha = 0.75) +
    theme(legend.position = "top")
  
  message("The red dashed lines show the box size [-L, L].")
  message("The black dotted lines show the training data range.")
  pp <- ggpubr::ggarrange(plt_ex_x1, plt_ex_x2, plt_ex_x5, nrow = 1, ncol = 3)
  ggpubr::ggarrange(plt_ex, pp,
    nrow = 2, ncol = 1
  )
}

plt_a <- create_4_plots(df_extreme, "base", "base")
df_extreme_hs <- df_extreme[which(df_extreme$base == "hs"), ]
df_extreme_tp <- df_extreme[which(df_extreme$base == "tp"), ]
plt_b <- create_4_plots(df_extreme_hs, "mlpd", NULL)
plt_c <- ggplot(df_extreme_hs, aes(x = x1, y = x2, color = mlpd)) +
  geom_point() +
  geom_vline(xintercept = train_ranges[, 1], lty = 3) +
  geom_hline(yintercept = train_ranges[, 2], lty = 3) +
  ggtitle("MLPD (using HS basis) at test points",
    subtitle = "Dotted lines = training data range"
  )

plt_a
plt_b
plt_c
```

## Comparing the predictions (also against the test data)

### Problematic draw

The predictions given the spline and GP bases match very well in points other than the edge cases.

```{r}
ytest <- fmf1$sd$y_test
mu_hs <- df_extreme_hs$mu
mu_tp <- df_extreme_tp$mu
plot(mu_tp, mu_hs, main = "All")
plot(mu_tp, mu_hs, ylim=c(-6,6), main="No edge cases")
```

```{r}
plot(mu_tp, ytest)
```

### A different draw

```{r}
df_other <- df[df$draw_idx == 10, ]
df_other_hs <- df_other[which(df_other$base == "hs"), ]
df_other_tp <- df_other[which(df_other$base == "tp"), ]
mu_hs <- df_other_hs$mu
mu_tp <- df_other_tp$mu
plot(mu_tp, mu_hs, main = "All")
```

```{r}
plot(mu_tp, ytest)
```

## Plotting the additive components

### Reference model

```{r}
plot_comps(fmf1$fit, fmf1$sd, ncol = 4, nrow = 2)
```

```{r}
plot_comps(fmf1$fit, fmf1$sd, test = TRUE, ncol = 4, nrow = 2)
```

### Submodel

```{r}
pp <- plot_projection(subm, projs$hs, fmf1$sd)
pp[[1]] + ggtitle("Projected component f1")
pp[[2]] + ggtitle("Projected component f5")
pp[[3]] + ggtitle("Projected component f2")
```

## Get ref model mean prediction

```{r}
draws_ref <- get_draws(fmf1$fit)
mu_ref <- draws_ref$f
mu <- mu_ref[idx_extreme-9,]
x_train <- t(fmf1$sd$X_train)
df_save <- data.frame(cbind(x_train, mu)) # saved this
```
